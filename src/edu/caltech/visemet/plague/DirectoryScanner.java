package edu.caltech.visemet.plague;

import com.google.common.collect.ImmutableList;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Max Hirschhorn #visemet
 */
public class DirectoryScanner {

    /**
     * Defines the logger used by this class.
     */
    private static final Logger LOGGER =
            LoggerFactory.getLogger(DirectoryScanner.class);

    /**
     * Returns a nicely formatted string representation of the specified array
     * of files.
     *
     * @param subdirectories the array of subdirectories to display
     *
     * @return prettified version of the specified array of files
     */
    private static String prettify(final File[] subdirectories) {
        final StringBuilder sb = new StringBuilder();

        sb.append("{");

        for (File subdirectory : subdirectories) {
            sb.append(" ").append(subdirectory.getName()).append(" ");
        }

        sb.append("}");

        return sb.toString();
    }

    /**
     * Returns a nicely formatted string representation of the specified list
     * of filenames.
     *
     * @param subdirectories the list of filenames to display
     *
     * @return prettified version of the specified list of filenames
     */
    private static String prettify(final List<String> filenames) {
        final StringBuilder sb = new StringBuilder();

        sb.append("{");

        for (String filename : filenames) {
            sb.append(" ").append(filename).append(" ");
        }

        sb.append("}");

        return sb.toString();
    }

    /**
     * Holds the directory in which to scan.
     */
    private final File directory;

    /**
     * Holds the list of filenames for which to scan.
     */
    private final List<String> filenames;

    /**
     * Holds the bindings generated by this directory scanner.
     */
    private final List<String> bindings = new ArrayList<>();

    /**
     * Class constructor specifying a directory and a list of filenames.
     *
     * @param directory the directory in which to scan
     * @param filenames the list of filenames for which to scan
     */
    public DirectoryScanner(
            final File directory, final List<String> filenames) {

        if (directory == null) {
            throw new IllegalArgumentException("directory must be specified");
        } else if (filenames == null) {
            throw new IllegalArgumentException("filenames must be specified");
        }

        if (!directory.isDirectory()) {
            throw new IllegalArgumentException(
                    "specified file must be a directory");
        }

        this.directory = directory;
        this.filenames = ImmutableList.<String>copyOf(filenames);
    }

    /**
     * Scans the previously specified directory for the previously specified
     * filenames.
     *
     * @return the prepared assignments each containing the submissions found
     * for a given filename
     */
    public List<Assignment> scan() {
        LOGGER.info(
                "Search for files {} in subdirectories of {}",
                prettify(filenames), directory.getName());

        File[] subdirectories = directory.listFiles();

        if (subdirectories == null) {
            throw new IllegalStateException(
                    "file specified was not a directory");
        }

        LOGGER.debug("Found subdirectories {}", prettify(subdirectories));

        List<Assignment> assignments = new ArrayList<>();

        for (String filename : filenames) {
            Assignment assignment = new Assignment(filename);
            assignments.add(assignment);
        }

        for (File subdirectory : subdirectories) {
            if (!subdirectory.isDirectory()) {
                LOGGER.info("Ignored file {}", subdirectory);

                continue;
            }

            bindings.add(subdirectory.getName());

            for (Assignment assignment : assignments) {
                File[] files = subdirectory.listFiles(assignment.asFilter());

                if (files.length == 0) {
                    LOGGER.error("Subdirectory {} missing file {}",
                            subdirectory.getName(), assignment.getFilename());

                    continue;
                }

                File file = files[0];

                LOGGER.debug(
                        "Found file {} in {}", file.getName(),
                        subdirectory.getName());

                Submission submission =
                        new Submission(bindings.size() - 1, file);

                assignment.attach(submission);
            }
        }

        return assignments;
    }
}
